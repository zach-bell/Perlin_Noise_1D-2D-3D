package com.test;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.VertexAttributes.Usage;
import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.Model;
import com.badlogic.gdx.graphics.g3d.ModelBatch;
import com.badlogic.gdx.graphics.g3d.ModelInstance;
import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder;
import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder.VertexInfo;
import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
import com.badlogic.gdx.utils.Array;
import com.noise.OpenSimplexNoise;

public class GridTest {
	
	private PerspectiveCamera camera;			// Will display what is rendered
	private ModelBatch modelBatch;				// Will tell opengl what to render
	private Model gridModel;					// Will be the generic model each instance inherits
	private ModelInstance gridInstance;
	
	private OpenSimplexNoise noise;
	
	private Color gridLineColor;
	
	public Array<ModelInstance> instances = new Array<ModelInstance>();
	
	public void create(){
		camera = new PerspectiveCamera(80,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
		camera.position.set(10f, 10f, 10f);		// Set the camera a few units back
		
		camera.lookAt(0f,0f,0f);				// Look at origin
		
		camera.near = 0.1f;						// This is how near we can see
		camera.far = 1000f;						// This is how far we can see
		
		modelBatch = new ModelBatch();
		
		noise = new OpenSimplexNoise();
		
		temp = new float[gridTotal+1][gridTotal+1];
		
		gridLineColor = new Color(Color.LIGHT_GRAY);
		
//		createGrid();
	}
	public void render(){
		camera.update();
		render(instances);
	}
	private void render(Array<ModelInstance> instances){
		modelBatch.begin(camera);
		createGrid();
		modelBatch.render(gridInstance);
		modelBatch.end();
	}
	
	private float acceleration = 0;
	
	public static float accelerationIncre = 0.03f;
	public static float size = 1.9f;
	public static float offIncr = 0.25f;
	
	private void update(){
		acceleration -= accelerationIncre;
		
		float zoff = acceleration;
		for(int z = 0; z < gridTotal; z += scale){
			float xoff = 0;
			for(int x = 0; x < gridTotal; x += scale){
				temp[x][z] = (float) (noise.eval(xoff, zoff)*size);
				xoff += offIncr;
			}
			zoff += offIncr;
		}
	}
	
	private float temp[][];
	
	private final int gridMin = -25;
	private final int gridMax = 25;
	private final int scale = 1;
	
	private int gridTotal = ((-1*gridMin)+gridMax);

	private void createGrid() {
		ModelBuilder modelBuilder = new ModelBuilder();
		
		modelBuilder.begin();
		
		update();
		
		MeshPartBuilder builder = modelBuilder.part("gridpart", GL20.GL_LINES, Usage.Position | Usage.ColorUnpacked, new Material());
		builder.setColor(gridLineColor);
		
		for(int z = 0; z < gridTotal; z += scale){
			for(int x = 0; x < gridTotal; x += scale){
				int zS = z+gridMin;
				int xS = x+gridMin;
				builder.rect(new VertexInfo().setPos(xS, temp[x][z], zS),
							new VertexInfo().setPos(xS, temp[x][z+1], zS+scale),
							new VertexInfo().setPos(xS+scale, temp[x+1][z], zS),
							new VertexInfo().setPos(xS+scale, temp[x+1][z+1], zS+scale) );
			}
		}
		gridModel = modelBuilder.end();
		
		gridInstance = new ModelInstance(gridModel);
	}
	
	public void dispose () {
		modelBatch.dispose();
		gridModel.dispose();
		gridModel = null;
	}
}
