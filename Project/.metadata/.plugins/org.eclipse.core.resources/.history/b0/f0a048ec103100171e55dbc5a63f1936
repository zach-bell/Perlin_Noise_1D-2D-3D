package com.engine;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.math.Vector3;
import com.test.GridTest;

public class MainCore extends ApplicationAdapter implements InputProcessor{
	
	private GridTest gridT;
	private PerspectiveCamera camera;			// Will display what is rendered
	
	public void create () {
		gridT = new GridTest();
		
		camera = new PerspectiveCamera(80,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
		camera.position.set(0f, 10f, 10f);		// Set the camera a few units back
		
		camera.lookAt(0f,0f,0f);				// Look at origin
		
		camera.near = 0.1f;						// This is how near we can see
		camera.far = 1000f;						// This is how far we can see
		
		gridT.create(camera);
	}

	public void render () {
		Gdx.gl.glClearColor(0, 0, 0, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT|GL20.GL_DEPTH_BUFFER_BIT);
		camera.update();
		update();
	}
	
	
	private long timer = System.currentTimeMillis();
	private int ups = 0, fps = 0;
	
	private long lastTime = System.nanoTime();
	private long currentTime;
	private double nextUpdate = 0;
	
	private final double oneSixtiethOfASecond = 1000000000.0 / 60.0;
	
	public void update() {
		currentTime = System.nanoTime();
		
		// This will limit the game to only updating every 60 frames per second
		nextUpdate += ((currentTime - lastTime) / oneSixtiethOfASecond);
		
		lastTime = currentTime;
		
		if(nextUpdate >= 1){
			ups++;
			fps++;
			nextUpdate--;
			gridT.render();
			checkKeys();
		}
		
		if((System.currentTimeMillis()-timer) >= 1000){
			timer = System.currentTimeMillis();
			System.out.println("Ups = " + ups);
			System.out.println("Fps = " + fps + "\n");
			fps = 0;
			ups = 0;
		}
	}
	private void checkKeys() {
		
	}

	public void dispose () {}

	@Override
	public boolean keyDown(int keycode) {
		if(keycode == Input.Keys.LEFT)
			camera.rotateAround(new Vector3(0f, 0f, 0f), new Vector3(0f, 1f, 0f), 8f);

		System.out.println("Did rotate");
		
		if(keycode == Input.Keys.RIGHT)
			camera.rotateAround(new Vector3(0f, 0f, 0f), new Vector3(0f, 10f, 10f), -8f);
		
		return true;
	}

	@Override
	public boolean keyUp(int keycode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		// TODO Auto-generated method stub
		return false;
	}

}
